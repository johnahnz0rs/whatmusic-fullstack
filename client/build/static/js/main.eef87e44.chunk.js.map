{"version":3,"sources":["assets/brand.png","components/Profile.js","components/Login.js","components/MyNavbar.js","components/Compare.js","components/ContentArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Profile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTopGenres","artistsList","genres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","j","some","one","genre","genreIndex","findIndex","obj","count","push","_iterator2","err","return","sort","a","b","state","user","bind","assertThisInitialized","prevProps","prevState","console","log","setState","_this2","accessToken","URLSearchParams","window","location","search","get","getConfig","method","headers","Authorization","concat","spotifyAPI","fetch","then","res","json","data","id","name","display_name","email","url","external_urls","spotify","followers","total","country","product","type","uri","images","image","topArtists","userTopArtists","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","items","artist","href","popularity","topGenres","topTracks","userTopTracks","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","artists","oneArtist","track","preview_url","album","release_date","disc_number","track_number","explicit","is_playable","duration","updateStateUser","catch","_this3","react_default","createElement","Fragment","className","onClick","React","Component","Login","signInWithSpotify","pickPage","MyNavbar","e","target","page","reactstrap_es","dark","style","backgroundColor","src","Brand","alt","navbar","signOut","Compare","ContentArea","showThisPage","newUser","components_MyNavbar","Route","exact","path","render","components_Login","components_Profile","components_Compare","App","BrowserRouter","components_ContentArea","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eef87e44.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brand.5dcf7921.png\";","import React from 'react';\n\nclass Profile extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // stuffs\n            user: this.props.user\n        };\n        // declare functions here\n        this.getTopGenres = this.getTopGenres.bind(this);\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.user !== this.props.user) {\n            console.log('*** componentDidUpdate ***');\n            this.setState({user: this.props.user});\n        }\n    }\n\n    componentDidMount() {\n        // this.fetch;\n        console.log('*** this.state.user ***', this.state.user);\n        // if (!this.state.user.id) {\n        //     window.location('/');\n        // }\n\n        // const's\n        const searchParams = new URLSearchParams(window.location.search);\n        const accessToken = searchParams.get('access_token');\n        const getConfig = {\n            method: 'GET',\n            headers: {Authorization: `Bearer ${accessToken}`}\n        };\n        const spotifyAPI = \"https://api.spotify.com/v1\";\n\n        let user = {};\n\n\n        // SPOTIFY\n        // Users Profile /v1/me\n            // Top Artists /v1/me/top/artists\n            // getTopGenres(topArtists)\n                // Top Tracks /v1/me/top/tracks\n\n        // get Users Profile\n        // @RETURNS { id, display_name, email, external_urls.spotify, followers.total, images[0].url, country, product: 'membership type', type: 'model(?) type', href: 'api endpoint for this user', uri }\n        fetch(`${spotifyAPI}/me`, getConfig)\n            .then(res => res.json())\n            .then(data => {\n                user = {\n                    id: data.id,\n                    name: data.display_name,\n                    email: data.email,\n                    url: data.external_urls.spotify,\n                    followers: data.followers.total,\n                    country: data.country,\n                    product: data.product,\n                    type: data.type,\n                    uri: data.uri\n                };\n                if (data.images[0].url) { user.image = data.images[0].url }\n            })\n            .then(() => {\n                // get Top Artists\n                // @PARAMS limit=(1-50), offset=(0), time_range={ short_term: '4 weeks', medium_term: '6 months', long_term: 'several years & future' }\n                // @RETURNS { ... , items: [\n                //      { id, name, images[0].url, external_urls.spotify, followers.total, genres: ['', ''], href: 'api endpoint for full artist details', popularity, type, uri },\n                //      { ... }, ... ]}\n                fetch(`${spotifyAPI}/me/top/artists?limit=50&time_range=short_term`, getConfig)\n                    .then(res => res.json())\n                    .then(topArtists => {\n                        // console.log(topArtists);\n                        // add topArtists list to user object\n                        let userTopArtists = [];\n                        for (let i of topArtists.items) {\n                            // console.log('*** each i of topArtists.items ***', i);\n                            const artist = {\n                                id: i.id,\n                                name: i.name,\n                                image: i.images[0].url,\n                                external_urls: i.href,\n                                followers: i.followers.total,\n                                genres: i.genres,\n                                href: i.href,\n                                popularity: i.popularity,\n                                type: i.type,\n                                uri: i.uri\n                            };\n                            userTopArtists.push(artist);\n                        }\n                        user.topArtists = userTopArtists;\n                        // also: derive topGenres\n                        user.topGenres = this.getTopGenres(userTopArtists); // return an array\n                    })\n                    .then(() => {\n                        // get Top Tracks\n                        // @PARAMS limit=(1-50), offset=(0), time_range={ short_term: '4 weeks', medium_term: '6 months', long_term: 'several years & future' }\n                        // @RETURNS { ... , items = [\n                        //  { id, name, artists: array of artist objects, album, disc_number, duration_ms, explicit, external_ids, external_urls.spotify, href: 'api endpoint for full track details', popularity, preview_url, available_markets, is_playable,  },\n                        //  { ... }, ... ]\n                        fetch(`${spotifyAPI}/me/top/tracks?limit=50&time_range=short_term`, getConfig)\n                            .then(res => res.json())\n                            .then(topTracks => {\n                                // update user variable\n                                let userTopTracks = [];\n                                for (let i of topTracks.items) {\n                                    // get abbreviated list of artists details\n                                    let artistsList = [];\n                                    for (let j of i.artists) {\n                                        // name, id, href\n                                        const oneArtist = {id: j.id, name: j.name, href: j.href};\n                                        artistsList.push(oneArtist);\n                                    }\n                                    // collect track details\n                                    const track = {\n                                        name: i.name,\n                                        artists: artistsList,\n                                        preview_url: i.preview_url,\n                                        album: i.album.name,\n                                        image: i.album.images[0].url,\n                                        release_date: i.album.release_date,\n                                        disc_number: i.disc_number,\n                                        track_number: i.track_number,\n                                        explicit: i.explicit,\n                                        is_playable: i.is_playable,\n                                        popularity: i.popularity,\n                                        type: i.type,\n                                        duration: i.duration,\n                                        href: i.href\n                                    };\n                                    userTopTracks.push(track);\n                                }\n                                // add top tracks to user object\n                                user.topTracks = userTopTracks;\n                                console.log('*** user after api calls ***', user);\n                            })\n                            .then(() => {\n                                // pass up to parent/ContentArea\n                                this.props.updateStateUser(user);\n                            })\n                            .catch(err => console.log(err));\n                    })\n                    .catch(err => console.log(err));\n            })\n            // .then(() => {\n            //     // dbase - check if user exist\n            //     fetch(`/api/user/${data.email}`)\n            //         .then(res => res.json())\n            //         .then(user => {\n            //             if (user) {\n            //                 // if user, then update\n            //                 // console.log('*** this user exists ***');\n            //             } else if (!user) {\n            //                 // if no user, then create\n            //             }\n            //         })\n            //         .catch(err => console.log(err));\n            // })\n            .catch(err => console.log(err));\n    }\n\n\n    getTopGenres = (artistsList) => {\n        let genres = [];\n        // tally the genres\n        for (let i of artistsList) {\n            for (let j of i.genres) {\n                if (!genres.some((one) => one.genre === j)) { // if genre doesn't exist in genres<Array>\n                    // then add that genre\n                    genres.push({genre: j, count: 1});\n                } else { // if genre already exists in genres<Array>\n                    // then update that genre.count\n                    const genreIndex = genres.findIndex(obj => obj.genre === j);\n                    genres[genreIndex].count += 1;\n                }\n            }\n\n        }\n        // return genres sorted by count/tally\n        // return genres.sort(this.dynamicSort('count'));\n        return genres.sort((a,b) => b.count - a.count);\n    };\n\n\n    render() {\n        return(\n          <React.Fragment>\n              <div className=\"\">\n                  <p>lol this is ur profile d00d</p>\n                  <button onClick={() => console.log('*** Profile.state***', this.state)}>print Profile.state</button>\n\n\n              </div>\n          </React.Fragment>\n        );\n    }\n\n}\n\nexport default Profile;","import React from 'react';\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.user\n        };\n        // declare methods here\n        this.signInWithSpotify = this.signInWithSpotify.bind(this);\n    }\n\n    componentDidMount() {\n\n    }\n\n\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.user !== this.props.user) {\n            this.setState({user: this.props.user});\n        }\n    }\n\n    signInWithSpotify = () => {\n        fetch('/api/login-spotify')\n            .then(res => res.json())\n            .then(() => this.props.pickPage('profile'));\n    };\n\n    render() {\n\n        const spotifyLoginURL = 'http://localhost:5000/api/login-spotify';\n\n        return(\n            <React.Fragment>\n                <div className=\"container-fluid login-comp-background\">\n                    <p>lol this is login</p>\n                    <button className=\"btn btn-sm btn-outline-primary\" onClick={() => console.log('*** print Login.state ***', this.state)}>print Login.state</button>\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-3\">\n                            &nbsp;\n                        </div>\n                        <div className=\"col-3\">\n                            <p>\n                                <span className=\"font-italic font-weight-bold\">Exploring each other's music</span>\n                                <br />can be an intimate way to get to know your new friend(s).\n                                <br />But sometimes,\n                                <br />it's hard to articulate our favorite music.\n                            </p>\n                        </div>\n                    </div>\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-3\">\n                            <p>\n                                At <span className=\"font-italic\"><span className=\"font-weight-bold\">whatMusic</span>,\n                                <br />we got your back.</span>\n                                <br />We show you what music yous two both like, so you can start groovin' together.\n                            </p>\n                            <h5>Sign in below to get started!</h5>\n                        </div>\n                        <div className=\"col-3\">\n                            &nbsp;\n                        </div>\n                    </div>\n\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-4\">\n                            {/*<button className=\"btn btn-sm btn-primary\" onClick={this.signInWithSpotify}>Sign in with Spotify</button>*/}\n                            {/*<button className=\"btn btn-sm btn-primary\" onClick={() => window.location=`api/login`}>Sign in with Spotify</button>*/}\n                            <a href={spotifyLoginURL}><button className=\"btn btn-sm btn-primary\">Sign in with Spotify</button></a>\n                        </div>\n                    </div>\n\n                </div>\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default Login;","import React from 'react';\nimport {\n    Navbar,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n} from 'reactstrap';\nimport Brand from '../assets/brand.png';\n\nclass MyNavbar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.user\n        };\n        // bind methods here\n        this.pickPage = this.pickPage.bind(this);\n    }\n\n    componentDidMount() {\n        // this.setState({user: this.props.user});\n        // this.fetch;\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.user !== this.props.user) {\n            this.setState({user: this.props.user});\n        }\n    }\n\n    pickPage = (e) => {\n        console.log(`*** navbar.pickPage(${e.target.name}) ***`);\n        const page = e.target.name;\n        this.props.pickPage(page);\n    };\n\n    render() {\n\n        // const divNavbar = {width: '100%', backgroundColor: 'green', margin: '0 auto', padding: '0'};\n\n        return (\n            <React.Fragment>\n\n                <div className=\"new-attempt-closed\">\n                    {/*<div className=\"div-navbar container-fluid text-center\" style={divNavbar}>*/}\n\n                        {/*<div className=\"navbar sticky-top navbar-expand-md navbar-dark\" style={{backgroundColor: \"#F36D76\"}}> /!*this makes the navbar pink*!/*/}\n                            {/*<a href=\"#\" className=\"navbar-brand\" name=\"login\" onClick={this.pickPage}>whatMusic</a>*/}\n                            {/*<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarOptions\" aria-controls=\"navbarOptions\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">*/}\n                                {/*<span className=\"navbar-toggler-icon\"></span>*/}\n                            {/*</button>*/}\n\n                            {/*<div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarOptions\">*/}\n                                {/*<ul className=\"navbar-nav\">*/}\n                                    {/*<li className=\"nav-item\">*/}\n                                        {/*<a href=\"#\" className=\"nav-link\"  name=\"profile\" onClick={this.pickPage}>Profile</a>*/}\n                                    {/*</li>*/}\n                                    {/*<li className=\"nav-item\">*/}\n                                        {/*<a href=\"#\" className=\"nav-link\"  name=\"compare\" onClick={this.pickPage}>Who's your friend?</a>*/}\n                                    {/*</li>*/}\n                                    {/*{this.state.user.id &&*/}\n                                    {/*<li className=\"nav-item\">*/}\n                                        {/*<a href=\"#\" className=\"nav-link\" name=\"signOut\" onClick={this.props.signOut}>Sign Out</a>*/}\n                                    {/*</li>}*/}\n                                {/*</ul>*/}\n                            {/*</div>*/}\n                        {/*</div>*/}\n                    {/*</div>*/}\n                </div>\n\n\n                <Navbar dark style={{backgroundColor: '#F36D76'}}>\n\n                    <NavbarBrand href='/' className=\"mr-auto ml-auto\">\n                        <img className=\"navbar-brand\" src={Brand} alt=\"\" />\n                        {/*<NavLink href=\"/\">whatMusic</NavLink>*/}\n                    </NavbarBrand>\n\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <NavLink href=\"/profile\">Profile</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/compare\">Compare</NavLink>\n                        </NavItem>\n                        {this.state.user.id &&\n                        <NavItem>\n                            <NavLink href=\"#\" onClick={() => this.props.signOut}>Sign Out</NavLink>\n                        </NavItem>\n                        }\n                    </Nav>\n                </Navbar>\n                <button className=\"btn btn-sm btn-outline-warning\" onClick={() => console.log('*** print MyNavbar.state ***', this.state)}>print MyNavbar.state</button>\n\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default MyNavbar;","import React from 'react';\n\nclass Compare extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.user\n        };\n        // declare methods here\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n\n                <div className=\"row container\">\n                    <p>lol this is compare</p>\n                    <button className=\"btn btn-sm btn-outline-success\" onClick={() => console.log('*** print Compare.state ***' ,this.state)}>print Compare.state</button>\n                </div>\n\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Compare;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Profile from './Profile';\nimport Login from './Login';\nimport MyNavbar from './MyNavbar';\nimport Compare from './Compare';\n\n// import BackgroundImage from '../assets/background.png';\n\n\n\nclass ContentArea extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        // declare methods here\n        this.signOut = this.signOut.bind(this);\n        this.pickPage = this.pickPage.bind(this);\n        this.updateStateUser = this.updateStateUser.bind(this);\n    }\n\n    componentDidMount() {\n        // this.state.user.id ? this.setState({showThisPage: 'profile'}) : this.setState({showThisPage: 'login'});\n        console.log('*** ContentArea.props ***', this.props);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // if (prevProps.user !== this.props.user) {\n        //     this.setState({user: this.props.user});\n        // }\n    }\n\n    signOut = () => {\n        this.setState({user: {}});\n        // this.setState({showThisPage: 'login'});\n        window.location('/');\n    };\n\n    pickPage = (page) => {\n        // @DESC picks a page to display\n        this.setState({showThisPage: page});\n        console.log(`*** pickPage() ***`, page);\n    };\n\n    updateStateUser = (newUser) => {\n        // @DESC update the user in this root component's state.\n        this.setState({user: newUser});\n        console.log('*** lol updating ContentArea.state.user ***', newUser);\n    };\n\n    render() {\n\n        // const rootDiv = {height: '100vh', width: '100vw', display: 'block', position: 'relative'};\n        // const navbarContainer = {backgroundColor: 'green', width: '100%', margin: '0', padding: '0'};\n\n        return (\n            <React.Fragment>\n                <div className=\"root-div container-fluid\">\n                    {/*<div className=\"navbar-container\" style={navbarContainer}>*/}\n                        <MyNavbar user={this.state.user || {}} signOut={this.signOut} pickPage={this.pickPage} />\n\n                    <button className=\"btn btn-sm btn-outline-danger\" onClick={() => console.log('*** print ContentArea.state ***', this.state)}>print ContentArea.state</button>\n                    {/*</div>*/}\n\n                    <Route exact path=\"/\" render={() => <Login user={this.state.user || {}} />} />\n                    <Route path=\"/profile\" render={() => <Profile user={this.state.user} updateStateUser={this.updateStateUser} pickPage={this.pickPage} />} />\n                    <Route path=\"/compare\" render={() => <Compare user={this.state.user} /> } />\n\n                    {/*display pages*/}\n                    {/*{this.state.showThisPage === 'login' &&*/}\n                        {/*<Login user={this.state.user} pickPage={this.pickPage} />}*/}\n                    {/*{this.state.showThisPage === 'profile' &&*/}\n                        {/*<Profile user={this.state.user} pickPage={this.pickPage} />}*/}\n                    {/*{this.state.showThisPage === 'compare' &&*/}\n                        {/*<Compare user={this.state.user} pickPage/>}*/}\n\n\n                </div>\n            </React.Fragment>\n        );\n    }\n};\n\nexport default ContentArea;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport ContentArea from './components/ContentArea';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <React.Fragment>\n                    <ContentArea />\n                </React.Fragment>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}